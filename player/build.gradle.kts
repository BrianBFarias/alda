import java.nio.file.Paths

plugins {
  // TODO: See if there is a more recent version of Kotlin multiplatform?
  //
  // On the master branch, we're doing this:
  // id("org.jetbrains.kotlin.jvm") version("1.7.21")
  kotlin("multiplatform") version "1.6.10"
  application
}

java {
  targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
  mavenLocal()
  mavenCentral()
}

if (project.gradle.startParameter.taskNames.contains("build")) {
  throw RuntimeException(
"""-----------------------------------------------------------------------------
Dave 2022-01-17: It would be nice if I could customize the `gradle build` task
so that the JVM build uses the `fatJar` task I've defined in build.gradle.kts,
instead of whatever default, non-fat JAR approach it's using.

But I can't, for the life of me, figure out how to replace/customize the `gradle
build` task. If you know how to do this, please enlighten me!

As a workaround, I am disabling the `gradle build` task. Instead, use the
`gradle fatJar` task directly to build  the JVM part.

To build the JS part, run `bin/build-js`, which includes workarounds for the
out-of-the-box flakiness of Kotlin JS tooling.
-----------------------------------------------------------------------------"""
)
}

////////////////////////////////////////////////////////////////////////////////
// This could be a task, but I don't want it to be possible for this file not to
// exist, and it's fast to create it, so we're just going to make Gradle always
// create it, regardless of what task is being run.
////////////////////////////////////////////////////////////////////////////////

val versionFile = Paths.get(
  rootDir.toPath().getParent().toString(), "VERSION"
)

val aldaVersion = versionFile.toFile().readText().trim()

println("*** Alda version (from top-level VERSION file): ${aldaVersion}")

val versionDefFile = Paths.get(
  rootDir.toString(), "src", "commonMain", "kotlin", "Version.kt"
)

println("*** Generating ${versionDefFile}...")

versionDefFile.toFile().writeText(
"""// IMPORTANT: This file is auto-generated by build.gradle.kts. DO NOT EDIT!

package io.alda.player

val playerVersion = "${aldaVersion}"""")

////////////////////////////////////////////////////////////////////////////////

// Multiplatform Kotlin configuration
//
// JVM: CLI `alda-player` process
// JS: in-browser Alda player process (for use with alda.wasm, generated from
// the Go client code)
kotlin {
  jvm {
    withJava()

    compilations {
      val main = getByName("main")
      tasks {
        register<Jar>("fatJar") {
          archiveBaseName.set("${project.name}-fat")
          duplicatesStrategy = DuplicatesStrategy.INCLUDE
          manifest {
            attributes["Main-Class"] = "io.alda.player.MainKt"
            attributes["Multi-Release"] = "true"
          }
          from(configurations.compileClasspath.get().map({ if (it.isDirectory) it else zipTree(it) }))
          from(configurations.runtimeClasspath.get().map({ if (it.isDirectory) it else zipTree(it) }))
          val jar: CopySpec by getting(Jar::class)
          with(jar)
        }
      }
    }
  }

  js {
    browser {
      binaries.executable()
    }
  }

  sourceSets {
    val commonMain by getting {
      dependencies {
        implementation("io.github.microutils:kotlin-logging:2.1.21")
      }
    }

    val jvmMain by getting {
      dependencies {
        implementation(kotlin("stdlib-jdk8"))
        implementation(kotlin("reflect"))
        implementation("com.beust:klaxon:5.5")
        implementation("com.github.ajalt:clikt:2.4.0")

        implementation("com.illposed.osc:javaosc-core:0.8") {
          exclude("org.slf4j", "slf4j-api")
          exclude("org.slf4j", "slf4j-ext")
          exclude("org.slf4j", "slf4j-log4j12")
          exclude("log4j", "log4j")
        }

        implementation("io.github.soc:directories:11")

        // logging
        implementation("org.slf4j:slf4j-api:1.7.30")
        implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.17.0")
        implementation("org.apache.logging.log4j:log4j-api:2.17.0")
        implementation("org.apache.logging.log4j:log4j-core:2.17.0")
      }
    }

    val jsMain by getting {
      dependencies {
        // ...
      }
    }
  }
}

application {
  mainClass.set("io.alda.player.MainKt")
}

val run by tasks.getting(JavaExec::class) {
  standardInput = System.`in`
}
